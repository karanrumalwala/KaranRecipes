{"version":3,"sources":["rece.module.css","Reciepe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Reciepe","title","calories","image","ingredients","className","style","rece","textAlign","textDecoration","map","ingredient","text","src","alt","App","useState","res","setRes","search","setSearch","query","setQuery","useEffect","getReceps","a","fetch","response","json","data","hits","onSubmit","e","preventDefault","type","value","onChange","target","recipe","key","label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,MAAQ,sB,2MCkBrCC,EAhBD,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,MAAMC,EAA8B,EAA9BA,SAASC,EAAqB,EAArBA,MAAMC,EAAe,EAAfA,YACjC,OACI,yBAAKC,UAAWC,IAAMC,MAClB,wBAAID,MAAO,CAACE,UAAU,SAASC,eAAe,cAAeR,GAC7D,4BACKG,EAAYM,KAAI,SAAAC,GAAU,OACvB,4BAAKA,EAAWC,UAIxB,2BAAIV,GACJ,yBAAKG,UAAWC,IAAMH,MAAOU,IAAKV,EAAOW,IAAI,OC0C1CC,G,MApDL,WACV,IADc,EAIKC,mBAAS,IAJd,mBAIRC,EAJQ,KAIJC,EAJI,OAKUF,mBAAS,IALnB,mBAKRG,EALQ,KAKDC,EALC,OAMQJ,mBAAS,WANjB,mBAMRK,EANQ,KAMFC,EANE,KAQdC,qBAAU,WAAKC,MAAa,CAACH,IAE7B,IAAMG,EAAS,uCAAE,8BAAAC,EAAA,sEACOC,MAAM,mCAAD,OAAoCL,EAApC,mBAVhB,WAUgB,oBATf,qCAQG,cACTM,EADS,gBAEGA,EAASC,OAFZ,OAETC,EAFS,OAGfX,EAAOW,EAAKC,MAHG,2CAAF,qDAgBb,OACE,yBAAKzB,UAAU,OACb,0BAAM0B,SARK,SAAAC,GACfA,EAAEC,iBACFX,EAASH,GACTC,EAAU,KAKqBf,UAAU,eACnC,2BAAOA,UAAU,aAAa6B,KAAK,OACnCC,MAAOhB,EAAQiB,SAdH,SAAAJ,GAClBZ,EAAUY,EAAEK,OAAOF,UAcb,4BACE9B,UAAU,aACV6B,KAAK,UAFP,WAMF,yBAAK7B,UAAU,QACVY,EAAIP,KAAI,SAAA4B,GAAM,OACf,kBAAC,EAAD,CACAC,IAAKD,EAAOA,OAAOE,MACnBvC,MAAOqC,EAAOA,OAAOE,MACrBtC,SAAUoC,EAAOA,OAAOpC,SACxBC,MAAOmC,EAAOA,OAAOnC,MACrBC,YAAakC,EAAOA,OAAOlC,qBCpCjBqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD0H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e3fcf4b9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"rece\":\"rece_rece__P-q4t\",\"image\":\"rece_image__2IaWT\"};","import React from 'react';\r\nimport style from './rece.module.css';\r\n\r\nconst Reciepe=({title,calories,image,ingredients})=>{\r\n    return(\r\n        <div className={style.rece}>\r\n            <h1 style={{textAlign:'center',textDecoration:'underline'}}>{title}</h1>\r\n            <ol>\r\n                {ingredients.map(ingredient=>(\r\n                    <li>{ingredient.text}</li>\r\n                )\r\n                )}\r\n            </ol>\r\n            <p>{calories}</p>\r\n            <img className={style.image} src={image} alt=\"\"/>\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default Reciepe;","import React,{useEffect,useState} from 'react';\nimport Reciepe from './Reciepe';\nimport './App.css';\n\nconst App=()=>{\nconst APP_ID=\"53fd44a3\";\nconst APP_KEY=\"f3b37aba3f5b98874ddf55146e4539a8\";\n\nconst[res,setRes]= useState([]);\nconst[search,setSearch]=useState('');\nconst[query,setQuery]=useState('chicken');\n\nuseEffect(()=>{getReceps()},[query]);\n\nconst getReceps =async()=>{\n  const response =await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n  const data= await response.json();\n  setRes(data.hits);\n};\n\nconst updateSearch= e =>{\n  setSearch(e.target.value);\n}\n\nconst getSearch= e =>{\n  e.preventDefault();\n  setQuery(search);\n  setSearch('');\n}\n\n  return(\n    <div className=\"App\">\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input className=\"search-bar\" type=\"text\" \n        value={search} onChange={updateSearch}/>\n        <button \n          className=\"search-btn\" \n          type=\"submit\">\n          search\n        </button>\n      </form>\n      <div className=\"rece\">\n          {res.map(recipe=>(\n          <Reciepe \n          key={recipe.recipe.label}\n          title={recipe.recipe.label}\n          calories={recipe.recipe.calories}\n          image={recipe.recipe.image}\n          ingredients={recipe.recipe.ingredients}\n        />\n      ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />,document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}